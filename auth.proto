syntax = "proto3";

package auth.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
// the validate rules:
// https://github.com/envoyproxy/protoc-gen-validate
import "validate/validate.proto";
import "cinch/params/params.proto";

option go_package = "./api/auth;auth";
option java_multiple_files = true;
option java_package = "auth.v1";
option java_outer_classname = "AuthProtoV1";

// The auth service definition.
service Auth {
  rpc Register (RegisterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/pub/register"
      body: "*"
    };
  }
  rpc Pwd (PwdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/pwd"
      body: "*"
    };
  }
  rpc Login (LoginRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/pub/login"
      body: "*"
    };
  }
  rpc Status (StatusRequest) returns (StatusReply) {
    option (google.api.http) = {
      get: "/pub/status"
    };
  }
  rpc Captcha (google.protobuf.Empty) returns (CaptchaReply) {
    option (google.api.http) = {
      get: "/pub/captcha"
    };
  }
  rpc Refresh (RefreshRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/refresh"
      body: "*"
    };
  }
  rpc Logout (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/logout"
      body: "*"
    };
  }
  rpc Info (google.protobuf.Empty) returns (InfoReply) {
    option (google.api.http) = {
      get: "/info"
    };
  }
  rpc Idempotent (google.protobuf.Empty) returns (IdempotentReply) {
    option (google.api.http) = {
      get: "/idempotent"
    };
  }
  rpc CheckIdempotent (CheckIdempotentRequest) returns (google.protobuf.Empty) {}
  rpc GetUserByCode (GetUserByCodeRequest) returns (GetUserByCodeReply) {}
  rpc FindUser (FindUserRequest) returns (FindUserReply) {
    option (google.api.http) = {
      get: "/user"
    };
  }
  rpc UpdateUser (UpdateUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user/{id}",
      body: "*",
      additional_bindings {
        patch: "/user/{id}",
        body: "*",
      }
    };
  }
  rpc DeleteUser (params.IdsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/{ids}"
    };
  }
  rpc Permission (PermissionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/permission"
    };
  }
  rpc CreateAction (CreateActionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/action"
      body: "*"
    };
  }
  rpc FindAction (FindActionRequest) returns (FindActionReply) {
    option (google.api.http) = {
      get: "/action"
    };
  }
  rpc UpdateAction (UpdateActionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/action/{id}"
      body: "*",
      additional_bindings {
        patch: "/action/{id}",
        body: "*",
      }
    };
  }
  rpc DeleteAction (params.IdsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/action/{ids}"
    };
  }
  rpc CreateRole (CreateRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/role"
      body: "*"
    };
  }
  rpc FindRole (FindRoleRequest) returns (FindRoleReply) {
    option (google.api.http) = {
      get: "/role"
    };
  }
  rpc UpdateRole (UpdateRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/role/{id}"
      body: "*",
      additional_bindings {
        patch: "/role/{id}",
        body: "*",
      }
    };
  }
  rpc DeleteRole (params.IdsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/role/{ids}"
    };
  }
  rpc CreateUserGroup (CreateUserGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/group"
      body: "*"
    };
  }
  rpc FindUserGroup (FindUserGroupRequest) returns (FindUserGroupReply) {
    option (google.api.http) = {
      get: "/user/group"
    };
  }
  rpc UpdateUserGroup (UpdateUserGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user/group/{id}"
      body: "*",
      additional_bindings {
        patch: "/user/group/{id}",
        body: "*",
      }
    };
  }
  rpc DeleteUserGroup (params.IdsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/group/{ids}"
    };
  }
  rpc CreateWhitelist (CreateWhitelistRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/whitelist"
      body: "*"
    };
  }
  rpc HasWhitelist (HasWhitelistRequest) returns (HasWhitelistReply) {}
  rpc FindWhitelist (FindWhitelistRequest) returns (FindWhitelistReply) {
    option (google.api.http) = {
      get: "/whitelist"
    };
  }
  rpc UpdateWhitelist (UpdateWhitelistRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/whitelist/{id}"
      body: "*",
      additional_bindings {
        patch: "/whitelist/{id}",
        body: "*",
      }
    };
  }
  rpc DeleteWhitelist (params.IdsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/whitelist/{ids}"
    };
  }
}

message Captcha {
  string id = 1;
  string img = 2;
}

message Action {
  uint64 id = 1;
  string code = 2;
  string name = 3;
  string word = 4;
  string resource = 5;
  string menu = 6;
  string btn = 7;
}

message User {
  uint64 id = 1;
  string created_at = 2;
  string updated_at = 3;
  string username = 4;
  string code = 5;
  string platform = 6;
  bool locked = 7;
  string last_login = 11;
  int64 lock_expire = 12;
  string lock_msg = 13;
  repeated Action actions = 14;
  uint64 role_id = 15;
  Role role = 16;
}

message UserGroup {
  uint64 id = 1;
  string name = 2;
  string word = 3;
  repeated Action actions = 4;
  repeated User users = 5;
}

message Role {
  uint64 id = 1;
  string name = 2;
  string word = 3;
  string action = 4;
  repeated Action actions = 5;
}

message Whitelist {
  uint64 id = 1;
  uint32 category = 2;
  string resource = 3;
}

message RegisterRequest {
  string username = 1 [(validate.rules).string = {min_len: 5, max_len: 50}];
  string password = 2 [(validate.rules).string = {min_len: 6, max_len: 50}];
  string platform = 3 [(validate.rules).string = {min_len: 1}];
  string captcha_id = 4;
  string captcha_answer = 5;
}

message PwdRequest {
  string username = 1;
  string old_password = 2;
  string new_password = 3 [(validate.rules).string = {min_len: 6, max_len: 50}];
}

message LoginRequest {
  string username = 1;
  string password = 2;
  optional string platform = 3;
  optional string captcha_id = 4;
  optional string captcha_answer = 5;
}

message LoginReply {
  string token = 1;
  string expires = 2;
}

message StatusRequest {
  string username = 1 [(validate.rules).string = {min_len: 5, max_len: 50}];
}

message StatusReply {
  Captcha captcha = 1;
  bool locked = 2;
  int64 lock_expire = 3;
}

message CaptchaReply {
  Captcha captcha = 1;
}

message RefreshRequest {
  string token = 1;
}

message InfoReply {
  uint64 id = 1;
  string username = 2;
  string code = 3;
  string platform = 4;
  Permission permission = 5;
}

message CheckIdempotentRequest {
  string token = 1;
}

message IdempotentReply {
  string token = 1;
}

message Permission {
  repeated string resources = 1;
  repeated string menus = 2;
  repeated string btns = 3;
}

message GetUserByCodeRequest {
  string code = 1;
}

message GetUserByCodeReply {
  User user = 1;
}

message FindUserRequest {
  params.Page page = 1;
  optional string start_created_at = 2;
  optional string end_created_at = 3;
  optional string start_updated_at = 4;
  optional string end_updated_at = 5;
  optional string username = 6;
  optional string code = 7;
  optional string platform = 8;
  optional bool locked = 9;
}

message FindUserReply {
  params.Page page = 1;
  repeated User list = 2;
}

message UpdateUserRequest {
  uint64 id = 1;
  optional string username = 2;
  optional string password = 3;
  optional string platform = 4;
  optional bool locked = 5;
  optional string lock_expire_time = 6;
  optional string action = 7;
  optional uint64 roleId = 8;
}

message PermissionRequest {
  optional string resource = 1;
  optional string method = 2;
  optional string uri = 3;
}

message CreateActionRequest {
  string name = 1 [(validate.rules).string = {max_len: 50}];
  string word = 2 [(validate.rules).string = {max_len: 50}];
  string resource = 3;
  string menu = 4;
  string btn = 5;
}

message FindActionRequest {
  params.Page page = 1;
  optional string code = 2;
  optional string name = 3;
  optional string word = 4;
  optional string resource = 5;
}

message FindActionReply {
  params.Page page = 1;
  repeated Action list = 2;
}

message UpdateActionRequest {
  uint64 id = 1;
  optional string name = 2;
  optional string word = 3;
  optional string resource = 4;
  optional string menu = 5;
  optional string btn = 6;
}

message CreateRoleRequest {
  string name = 1 [(validate.rules).string = {max_len: 50}];
  string word = 2 [(validate.rules).string = {max_len: 50}];
  optional string action = 3;
}

message FindRoleRequest {
  params.Page page = 1;
  optional string name = 2;
  optional string word = 3;
  optional string action = 4;
}

message FindRoleReply {
  params.Page page = 1;
  repeated Role list = 2;
}

message UpdateRoleRequest {
  uint64 id = 1;
  optional string name = 2;
  optional string word = 3;
  optional string action = 4;
}

message CreateUserGroupRequest {
  repeated uint64 users = 1;
  string name = 2 [(validate.rules).string = {max_len: 50}];
  string word = 3 [(validate.rules).string = {max_len: 50}];
  optional string action = 4;
}

message FindUserGroupRequest {
  params.Page page = 1;
  optional string name = 2;
  optional string word = 3;
  optional string action = 4;
}

message FindUserGroupReply {
  params.Page page = 1;
  repeated UserGroup list = 2;
}

message UpdateUserGroupRequest {
  uint64 id = 1;
  optional string name = 2;
  optional string word = 3;
  optional string action = 4;
  optional string users = 5;
}

message CreateWhitelistRequest {
  uint32 category = 1;
  string resource = 2;
}

message HasWhitelistRequest {
  uint32 category = 1;
  message CheckPermission {
    string resource = 1;
    string method = 2;
    string uri = 3;
  }
  CheckPermission permission = 2;
}

message HasWhitelistReply {
  bool ok = 1;
}

message FindWhitelistRequest {
  params.Page page = 1;
  optional uint32 category = 2;
  optional string resource = 3;
}

message FindWhitelistReply {
  params.Page page = 1;
  repeated Whitelist list = 2;
}

message UpdateWhitelistRequest {
  uint64 id = 1;
  optional uint32 category = 2;
  optional string resource = 3;
}
